AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate CI/CD Lab - Core Infrastructure - TRIGGER'

Parameters:
  AppName:
    Type: String
    Default: 'java-full-stack'
    Description: 'Application name used to name resources'
  GitHubRepoName:
    Type: String
    Default: 'ecs-cicd-lab5-app'
    Description: 'Name of the GitHub repository containing the application code'
  GitHubRepoOwner:
    Type: String
    Default: 'ibra15-cyber'
    Description: 'The owner of the GitHub repository'
    #use this to trigger change
#  DeploymentTimestamp:
#    Type: String
#    Default: "default"
#    Description: 'Timestamp to force changeset creation'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Configuration"
        Parameters:
          - AppName
      - Label:
          default: "GitHub Configuration"
        Parameters:
          - GitHubRepoName
          - GitHubRepoOwner

Resources:
  # --- IAM ROLES --- assumes by ecs agent to pull image from ecr and publish to cloudwatch
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretRetrievalPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref DBSecret
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetRepositoryPolicy'
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AppName}'
        - PolicyName: ECRS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - 'arn:aws:s3:::aws-ecr-*'
                  - 'arn:aws:s3:::aws-ecr-*/*'
      Path: /

  # roles assumed by the ecs-tasks (actual running container) towards other services in the future
  # Update ECSTaskRole in infrastructure.yaml
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: S3RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GeneratePresignedUrl'
                Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - 'rds-db:connect'
                Resource: !Sub arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${RDSInstance}/postgres
        # Update ECSTaskRole policies
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref DBSecret
      Path: /

  # role assumed by codepeline to carry s3 actions of our artifact bucket when the codebuild placed them
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:GetApplication'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'ecs:DescribeServices'
                  - 'ecs:DescribeTaskDefinition'
                  - 'ecs:RegisterTaskDefinition'
                  - 'iam:PassRole' #crucialâ€”it allows Pipeline to pass roles to other services (like passing the ECS task role to CodeDeploy).
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:DescribeImages'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AppName}'
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
      Path: /

  #Role assumed by codedeploy
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
      Policies:
        - PolicyName: TaggingPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                  - 'elasticloadbalancing:AddTags'
                  - 'elasticloadbalancing:RemoveTags'
                  - 'ecs:TagResource'
                  - 'ecs:UntagResource'
                  - 'tag:TagResources'
                  - 'tag:UntagResources'
                Resource: '*'
      Path: /

  # creates an identity provider for an iam that trusts github's  id token service
  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList: ['sts.amazonaws.com']
      ThumbprintList: ['6938fd4d98bab03faadb97b34396831e3780aea1']

  # role assumed by github actiosn
  GitHubOIDCRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: #"Trust tokens from our GitHubOIDCProvider if they come from the specified repository (repo:ibra15-cyber/ecs-cicd-lab-app:*)."
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOIDCProvider
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com'
              StringLike:
                'token.actions.githubusercontent.com:sub': !Sub 'repo:${GitHubRepoOwner}/${GitHubRepoName}:*'
      Policies:
        - PolicyName: ECRPushPull
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AppName}'
        - PolicyName: S3ArtifactAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: !Sub 'arn:aws:s3:::${ArtifactBucket}/deployment-artifacts/*'
              - Effect: Allow
                Action:
                  - 's3:ListAllMyBuckets'
                Resource: '*'
        - PolicyName: ECSCodeDeployAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:DescribeTaskDefinition'
                  - 'ecs:DescribeServices'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:GetApplication'
                  - 'codedeploy:GetApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !GetAtt ECSTaskExecutionRole.Arn
                  - !GetAtt ECSTaskRole.Arn
        - PolicyName: PipelineTriggerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codepipeline:StartPipelineExecution'
                  - 'codepipeline:ListPipelines'
                  - 'codepipeline:ListPipelineExecutions'
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppName}-Pipeline'
        - PolicyName: RDSReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:DescribeDBInstances'
                  - 'rds:DescribeDBClusters'
                  - 'rds:ListTagsForResource'
                Resource: '*'
        # Add to GitHubOIDCRole Policies section
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:ListSecrets'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                Resource: '*'
        # Add to GitHubOIDCRole Policies section
        - PolicyName: S3ListAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListAllMyBuckets'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                Resource: '*'
        - PolicyName: IAMReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'iam:ListRoles'
                Resource: '*'
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codepipeline:ListPipelines'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codepipeline:StartPipelineExecution'
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppName}-Pipeline'
        # Add to GitHubOIDCRole Policies section
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:ListStacks'
                  - 'cloudformation:GetTemplate'
                Resource: '*'
        - PolicyName: ECSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:RunTask'
                  - 'ecs:DescribeTasks'
                  - 'ecs:StopTask'
                Resource: '*'
        - PolicyName: ECSTaskMigrationsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:RunTask'
                  - 'ecs:DescribeTasks'
                  - 'iam:PassRole'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/java-full-stack-Cluster'
                  - !Sub 'arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/java-full-stack-migrations:*'
                  - !GetAtt ECSTaskExecutionRole.Arn
                  - !GetAtt ECSTaskRole.Arn
      Path: /

  # --- NETWORKING (High Availability) ---
  #VPC: Creates a Virtual Private Cloud, a logically isolated network.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-VPC

  #Create a gateway to provide internet access to the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # 4 diff subnets, 2 in each AZ
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true #This is what makes it a public subnet. Any resource (like a NAT Gateway or Load Balancer) launched here gets a public IP.
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-PublicSubnet-AZ1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-PublicSubnet-AZ2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-PrivateSubnet-AZ1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-PrivateSubnet-AZ2

  #A route table for the public subnets. It defines the path to the internet.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-Public-RT

  #Creates a separate route table for each private subnet.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-Private-RT-AZ1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-Private-RT-AZ2

  #Adds a rule to the public route table: "Send all internet-bound traffic (0.0.0.0/0) to the Internet Gateway."
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Explicitly associates each public and private subnet with the public or private route table respectively.
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # --- SECURITY GROUPS --- FIREWALL RULES -----
  #The security group for the Application Load Balancer (ALB).
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AppName}-ALB-SG
      GroupDescription: Security group for the Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0 #The ALB is only allowed to send traffic out to port 8080 (the port the application container is listening on)

  #
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AppName}-ECS-SG
      GroupDescription: Security group for ECS Fargate tasks
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup



  # --- ECR REPOSITORY ------
  # Creates an Elastic Container Registry repository to store your Docker images.
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref AppName
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true


  # ECS CLUSTER ---
  # Creates a logical grouping for your ECS resources (like a folder for your services and tasks)
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AppName}-Cluster

  #  ELASTIC LOAD BALANCING ---
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer   # Creates the Application Load Balancer
    Properties:
      Name: !Sub ${AppName}-ALB
      Scheme: internet-facing #Makes the ALB publicly accessible with a DNS name.
      Type: application
      Subnets: #  Places the ALB in the public subnets across two AZs
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Creates the "blue" target group. This is where the ALB will initially route traffic.
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-Blue-TG
      Port: 80
      Protocol: HTTP
      TargetType: ip #  Because Fargate tasks use elastic network interfaces with their own IP addresses, we target by IP, not by instance ID
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80 # Listens on port 80 of the ALB.
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup # forwards to the blue target group

  # --- CLOUDWATCH LOGS ---
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}
      RetentionInDays: 7 # deletes logs after a week

  # --- S3 BUCKET FOR CODE PIPELINE ARTIFACTS ---
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled # preserve history

  # --- EVENTBRIDGE RULE TO TRIGGER PIPELINE ON ECR PUSH ---
  ECRPushEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub Rule to trigger pipeline when a new image is pushed to ${AppName} ECR repo
      EventPattern: #  Watches for a specific CloudWatch event: a successful PUSH to the ECR repository.
        source:
          - aws.ecr
        detail-type:
          - ECR Image Action
        detail:
          action-type:
            - PUSH
          result:
            - SUCCESS
          repository-name:
            - !Ref AppName
          image-tag:
            - latest
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppName}-Pipeline #When that event is detected, it tells EventBridge to start an execution of your CodePipeline.
          Id: CodePipelineTarget
          RoleArn: !GetAtt EventBridgePipelineRole.Arn

  #IAM role that gives the EventBridge service permission to do one thing: start your specific CodePipeline.
  EventBridgePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [events.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: StartPipeline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codepipeline:StartPipelineExecution'
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppName}-Pipeline
      Path: /

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AppName}-VPCEndpoint-SG
      GroupDescription: Security group for VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ECSSecurityGroup  # MUST reference ECS SG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Add to infrastructure.yaml Resources section
  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      PolicyDocument:
        Statement:
          # Stage 1: Allow all S3 access only from the vpc aka, the ecr and the ecs
          - Effect: Allow
            Principal: "*"
            Action:
              - "s3:Get*"
              - "s3:List*"
              - "s3:PutObject"
            Resource: "*"
            Condition:
              StringEquals:
                aws:SourceVpc: !Ref VPC

  VPCEndpointCloudWatchLogs:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  VPCEndpointECR:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  VPCEndpointECRAPI:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup


  VPCEndpointSecretsManager:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # Add to infrastructure.yaml Resources section
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS PostgreSQL"
      VpcId: !Ref VPC

  ECSIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref ALBSecurityGroup
  ECSEgressToDB:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref DBSecurityGroup
  DBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ECSSecurityGroup
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub ${AppName}-db
      DBName: photogallery
      Engine: postgres
      EngineVersion: "15.7"
      DBInstanceClass: db.t3.micro
      MasterUsername: postgres
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}::password}}'
      AllocatedStorage: 20
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      MultiAZ: false
      PubliclyAccessible: false
      BackupRetentionPeriod: 7

  # Add to infrastructure.yaml Resources section
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-photos-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
            Condition:
              StringEquals:
                aws:SourceVpce: !Ref VPCEndpointS3

  # Add to Resources section
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AppName}/db-credentials
      Description: 'Database credentials for Photo Gallery application'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'


Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AppName}-VPCId
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AppName}-ECSClusterName
  ALBArn:
    Description: Application Load Balancer ARN
    Value: !Ref ALB
    Export:
      Name: !Sub ${AppName}-ALBArn
  ALBDNSName:
    Description: ALB DNS Name
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub ${AppName}-ALBDNSName
  ALBSecurityGroupId:
    Description: ALB Security Group ID
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${AppName}-ALBSecurityGroupId
  ECSSecurityGroupId:
    Description: ECS Security Group ID
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub ${AppName}-ECSSecurityGroupId
  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AppName}-PrivateSubnet1Id
  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AppName}-PrivateSubnet2Id
  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}
    Export:
      Name: !Sub ${AppName}-ECRRepositoryURI
  ECSTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${AppName}-ECSTaskExecutionRoleArn
  ECSTaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub ${AppName}-ECSTaskRoleArn
  ALBTargetGroupArn:
    Description: ALB Target Group ARN
    Value: !Ref ALBTargetGroup
    Export:
      Name: !Sub ${AppName}-ALBTargetGroupArn
  CloudWatchLogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref CloudWatchLogGroup
    Export:
      Name: !Sub ${AppName}-CloudWatchLogGroupName
  GitHubOIDCRoleArn:
    Description: GitHub OIDC Role ARN
    Value: !GetAtt GitHubOIDCRole.Arn
    Export:
      Name: !Sub ${AppName}-GitHubOIDCRoleArn
  # In your infrastructure.yaml outputs section
  ALBTargetGroupName:
    Description: ALB Target Group Name
    Value: !GetAtt ALBTargetGroup.TargetGroupName
    Export:
      Name: !Sub ${AppName}-ALBTargetGroupName

  ALBListenerArn:
    Description: ALB Listener ARN
    Value: !Ref ALBListener
    Export:
      Name: !Sub ${AppName}-ALBListenerArn

  # Add this to the Outputs section of infrastructure.yaml
  CodePipelineServiceRoleArn:
    Description: 'CodePipeline Service Role ARN'
    Value: !GetAtt CodePipelineServiceRole.Arn
    Export:
      Name: !Sub ${AppName}-CodePipelineServiceRoleArn

  CodeDeployServiceRoleArn:
    Description: CodeDeploy Service Role ARN
    Value: !GetAtt CodeDeployServiceRole.Arn
    Export:
      Name: !Sub ${AppName}-CodeDeployServiceRoleArn

  # Add this to the Outputs section of infrastructure.yaml
  ArtifactBucketName:
    Description: 'S3 Artifact Bucket Name'
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub ${AppName}-ArtifactBucketName

  #triggered
#  DeploymentTimestamp:
#    Description: 'Timestamp of last deployment'
#    Value: !Ref DeploymentTimestamp

  RDSInstanceEndpoint:
    Description: 'RDS Instance Endpoint Address'
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub ${AppName}-RDSInstanceEndpoint

  RDSInstancePort:
    Description: 'RDS Instance Endpoint Port'
    Value: !GetAtt RDSInstance.Endpoint.Port
    Export:
      Name: !Sub ${AppName}-RDSInstancePort

  # Add to infrastructure.yaml Outputs section
  S3BucketName:
    Description: 'S3 Bucket Name for Photos'
    Value: !Ref S3Bucket
    Export:
      Name: !Sub ${AppName}-S3BucketName

  DBSecretArn:
    Description: 'DB Secret ARN'
    Value: !Ref DBSecret
    Export:
      Name: !Sub ${AppName}-DBSecretArn

  CodePipelineName:
    Description: 'CodePipeline Name'
    Value: !Sub ${AppName}-Pipeline
    Export:
      Name: !Sub ${AppName}-CodePipelineName